generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// MULTITENANCY TABLES (Public Schema)
// ================================

// Tenants (Clientes SaaS)
model Tenant {
  id                  String    @id @default(cuid())
  name                String    // "Hospital São José"
  slug                String    @unique // "hospital-sao-jose"
  subdomain           String?   @unique // "sao-jose" (sao-jose.fisiohub.com)
  customDomain        String?   @unique // "fisio.hospitalsaojose.com"
  logoUrl             String?
  primaryColor        String    @default("#10B981")
  secondaryColor      String    @default("#3B82F6")
  plan                String    @default("basic") // basic, professional, enterprise
  status              String    @default("active") // active, inactive, suspended, trial
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  trialEndsAt         DateTime?
  lastActivityAt      DateTime?
  
  // Relacionamentos
  settings            TenantSetting[]
  subscriptions       TenantSubscription[]
  tenantUsers         TenantUser[]
  
  @@map("tenants")
}

// Configurações do Tenant
model TenantSetting {
  id        String   @id @default(cuid())
  tenantId  String
  key       String   // "max_hospitals", "features", "branding"
  value     Json     // Valor flexível em JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, key])
  @@map("tenant_settings")
}

// Planos de Assinatura
model SubscriptionPlan {
  id              String   @id @default(cuid())
  name            String   // "Básico", "Profissional", "Empresarial"
  slug            String   @unique // "basic", "professional", "enterprise"
  description     String?
  priceMonthly    Float    // Preço mensal
  priceYearly     Float    // Preço anual
  features        Json     // Lista de features
  limits          Json     // Limites do plano
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  // Relacionamentos
  subscriptions   TenantSubscription[]
  
  @@map("subscription_plans")
}

// Assinaturas dos Tenants
model TenantSubscription {
  id                    String   @id @default(cuid())
  tenantId              String
  planId                String
  status                String   @default("active") // active, canceled, past_due, unpaid
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  stripeSubscriptionId  String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relacionamentos
  tenant                Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  plan                  SubscriptionPlan @relation(fields: [planId], references: [id])
  
  @@map("tenant_subscriptions")
}

// Usuários Globais (podem acessar múltiplos tenants)
model GlobalUser {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String
  name              String
  isSuperAdmin      Boolean  @default(false)
  emailVerifiedAt   DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relacionamentos
  tenantUsers       TenantUser[]
  
  @@map("global_users")
}

// Acesso de usuários aos tenants
model TenantUser {
  id             String    @id @default(cuid())
  tenantId       String
  globalUserId   String
  role           String    // tenant_admin, hospital_admin, service_manager, collaborator
  status         String    @default("active") // active, inactive, suspended
  invitedAt      DateTime?
  joinedAt       DateTime?
  lastAccessAt   DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relacionamentos
  tenant         Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  globalUser     GlobalUser @relation(fields: [globalUserId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, globalUserId])
  @@map("tenant_users")
}

// ================================
// TENANT DATA MODELS (Per-Tenant Schema)
// ================================

// Cliente (empresa que contrata o serviço)
model Client {
  id                String    @id @default(cuid())
  name              String    // "Grupo Hospitalar XYZ"
  cnpj              String?   @unique
  contactEmail      String
  contactPhone      String?
  subscriptionPlan  String    @default("enterprise") // basic, professional, enterprise
  maxHospitals      Int       @default(5)
  maxUsers          Int       @default(100)
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamentos
  hospitals         Hospital[]

  @@map("clients")
}

// Hospital (unidade do cliente)
model Hospital {
  id                String    @id @default(cuid())
  name              String    // "Hospital Público Estadual Galileu"
  code              String    // "galileu" ou "santa-teresinha"
  address           String?
  phone             String?
  logoUrl           String?
  primaryColor      String?   @default("#3B82F6")
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamento com cliente
  clientId          String
  client            Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Relacionamentos
  services          Service[]
  users             User[]
  patients          Patient[]
  appointments      Appointment[]
  evolutions        Evolution[]
  indicators        Indicator[]
  barthelScales     BarthelScale[]
  mrcScales         MrcScale[]

  // Código único por cliente
  @@unique([code, clientId])
  @@map("hospitals")
}

// Serviço (departamento do hospital)
model Service {
  id                String    @id @default(cuid())
  name              String    // "Fisioterapia", "Psicologia", "Serviço Social"
  code              String    // "fisioterapia", "psicologia", "servico-social"
  description       String?
  color             String?   @default("#10B981") // Verde para fisio, azul para psico, etc
  icon              String?   // "heart", "brain", "users"
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamento com hospital
  hospitalId        String
  hospital          Hospital  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  // Relacionamentos
  users             User[]
  patients          Patient[]
  indicators        Indicator[]
  indicatorTemplates IndicatorTemplate[]
  barthelScales     BarthelScale[]
  mrcScales         MrcScale[]

  // Serviço único por hospital
  @@unique([code, hospitalId])
  @@map("services")
}

// Template de indicadores por serviço
model IndicatorTemplate {
  id                String    @id @default(cuid())
  name              String    // "Indicadores de Fisioterapia Hospitalar"
  description       String?
  fields            Json      // Array de campos personalizados
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamento com serviço
  serviceId         String
  service           Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("indicator_templates")
}

model User {
  id                String    @id @default(cuid())
  email             String   
  name              String
  password          String
  crf               String?
  phone             String?
  specialty         String?
  role              String    @default("PROFESSIONAL") // ADMIN, COORDINATOR, PROFESSIONAL, TECHNICIAN, VIEWER
  active            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamentos hierárquicos
  hospitalId        String
  hospital          Hospital  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  
  serviceId         String?   // Usuário pode ser de um serviço específico ou geral
  service           Service?  @relation(fields: [serviceId], references: [id])

  // Relacionamentos
  patients          Patient[]
  appointments      Appointment[]
  evolutions        Evolution[]
  indicators        Indicator[]
  barthelScales     BarthelScale[]
  mrcScales         MrcScale[]

  // Email único por hospital
  @@unique([email, hospitalId])
  @@map("users")
}

model Patient {
  id                String    @id @default(cuid())
  name              String
  email             String?
  phone             String?
  attendanceNumber  String?   // Único por hospital
  bedNumber         String?
  room              String?   // Quarto
  sector            String?   // Setor hospitalar
  birthDate         DateTime?
  address           String?
  cid               String?
  diagnosis         String?
  observations      String?
  admissionDate     DateTime?
  dischargeDate     DateTime?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamentos hierárquicos
  hospitalId        String
  hospital          Hospital  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  
  serviceId         String    // Paciente sempre pertence a um serviço
  service           Service   @relation(fields: [serviceId], references: [id])
  
  userId            String    // Profissional responsável
  user              User      @relation(fields: [userId], references: [id])

  // Relacionamentos
  appointments      Appointment[]
  evolutions        Evolution[]
  indicators        Indicator[]
  barthelScales     BarthelScale[]
  mrcScales         MrcScale[]

  // Número de atendimento único por hospital
  @@unique([attendanceNumber, hospitalId])
  @@map("patients")
}

model Appointment {
  id                String            @id @default(cuid())
  date              DateTime
  duration          Int               @default(60)
  status            AppointmentStatus @default(SCHEDULED)
  notes             String?
  price             Float?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  hospitalId        String
  hospital          Hospital          @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  userId            String
  patientId         String
  user              User              @relation(fields: [userId], references: [id])
  patient           Patient           @relation(fields: [patientId], references: [id])
  evolution         Evolution?

  @@map("appointments")
}

model Evolution {
  id                String      @id @default(cuid())
  symptoms          String?
  treatment         String?
  observations      String?
  exercises         String?
  nextSteps         String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  hospitalId        String
  hospital          Hospital    @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  userId            String
  patientId         String
  appointmentId     String      @unique
  user              User        @relation(fields: [userId], references: [id])
  patient           Patient     @relation(fields: [patientId], references: [id])
  appointment       Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  barthelScales     BarthelScale[]
  mrcScales         MrcScale[]

  @@map("evolutions")
}

// Indicadores customizáveis por serviço
model Indicator {
  id                String    @id @default(cuid())
  date              DateTime  @default(now())
  collaborator      String?
  sector            String?
  shift             String?
  
  // Dados customizáveis baseados no template do serviço
  data              Json      // Campos dinâmicos baseados no IndicatorTemplate
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamentos hierárquicos
  hospitalId        String
  hospital          Hospital  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  
  serviceId         String    // Indicador sempre pertence a um serviço
  service           Service   @relation(fields: [serviceId], references: [id])
  
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  
  patientId         String?   // Opcional, pode ser geral ou específico de paciente
  patient           Patient?  @relation(fields: [patientId], references: [id])

  @@map("indicators")
}

model BarthelScale {
  id                String    @id @default(cuid())
  
  // 10 atividades da Escala de Barthel
  feeding           Int       // 0, 5, 10
  bathing           Int       // 0, 5
  grooming          Int       // 0, 5
  dressing          Int       // 0, 5, 10
  bowelControl      Int       // 0, 5, 10
  bladderControl    Int       // 0, 5, 10
  toileting         Int       // 0, 5, 10
  transfer          Int       // 0, 5, 10, 15
  mobility          Int       // 0, 5, 10, 15
  stairs            Int       // 0, 5, 10
  
  totalScore        Int       // 0-100
  classification    String    // Dependência total, severa, moderada, leve, independente
  type              String    // ENTRADA ou SAIDA
  
  evaluationDate    DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamentos hierárquicos
  hospitalId        String
  hospital          Hospital  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  
  serviceId         String    // Escala sempre pertence a um serviço
  service           Service   @relation(fields: [serviceId], references: [id])
  
  userId            String
  patientId         String
  evolutionId       String?
  user              User      @relation(fields: [userId], references: [id])
  patient           Patient   @relation(fields: [patientId], references: [id])
  evolution         Evolution? @relation(fields: [evolutionId], references: [id])

  @@map("barthel_scales")
}

model MrcScale {
  id                String    @id @default(cuid())
  
  // Grupos musculares - Medical Research Council (0-5 cada)
  shoulderAbduction Int       // Abdução do ombro
  elbowFlexion      Int       // Flexão do cotovelo
  wristExtension    Int       // Extensão do punho
  hipFlexion        Int       // Flexão do quadril
  kneeExtension     Int       // Extensão do joelho
  ankleFlexion      Int       // Flexão do tornozelo
  neckFlexion       Int       // Flexão do pescoço
  trunkFlexion      Int       // Flexão do tronco
  shoulderAdduction Int       // Adução do ombro
  elbowExtension    Int       // Extensão do cotovelo
  
  totalScore        Int       // Soma total
  averageScore      Float     // Média
  classification    String    // Classificação da força
  type              String    // ENTRADA ou SAIDA
  
  evaluationDate    DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamentos hierárquicos
  hospitalId        String
  hospital          Hospital  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  
  serviceId         String    // Escala sempre pertence a um serviço
  service           Service   @relation(fields: [serviceId], references: [id])
  
  userId            String
  patientId         String
  evolutionId       String?
  user              User      @relation(fields: [userId], references: [id])
  patient           Patient   @relation(fields: [patientId], references: [id])
  evolution         Evolution? @relation(fields: [evolutionId], references: [id])

  @@map("mrc_scales")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}